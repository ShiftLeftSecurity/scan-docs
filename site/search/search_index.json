{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction ShiftLeft Scan is a free open-source security tool for modern DevOps teams. With an integrated multi-scanner based design, ShiftLeft Scan can detect various kinds of security flaws in your application and infrastructure code in a single fast scan. The kind of flaws detected are: Credentials Scanning to detect accidental secret leaks Static Analysis Security Testing (SAST) for a range of languages and frameworks Open-source dependencies audit Licence violation checks The product supports a range of integration options: from scanning every push via a git hook to scanning every build and pull-request in the CI/CD pipelines. Supported Languages & Frameworks Full list of supported languages is as follows: Salesforce Apex Bash Go Java JSP Node.js Oracle PL/SQL Python Rust (Dependency and Licence scan alone) Terraform Salesforce Visual Force Apache Velocity In addition, support for Infrastructure as Code (IaC) frameworks such as Ansible, AWS CloudFormation, Terraform, Kubernetes is also available. Scanning for more additional languages is in the works.","title":"Introduction"},{"location":"#introduction","text":"ShiftLeft Scan is a free open-source security tool for modern DevOps teams. With an integrated multi-scanner based design, ShiftLeft Scan can detect various kinds of security flaws in your application and infrastructure code in a single fast scan. The kind of flaws detected are: Credentials Scanning to detect accidental secret leaks Static Analysis Security Testing (SAST) for a range of languages and frameworks Open-source dependencies audit Licence violation checks The product supports a range of integration options: from scanning every push via a git hook to scanning every build and pull-request in the CI/CD pipelines.","title":"Introduction"},{"location":"#supported-languages-frameworks","text":"Full list of supported languages is as follows: Salesforce Apex Bash Go Java JSP Node.js Oracle PL/SQL Python Rust (Dependency and Licence scan alone) Terraform Salesforce Visual Force Apache Velocity In addition, support for Infrastructure as Code (IaC) frameworks such as Ansible, AWS CloudFormation, Terraform, Kubernetes is also available. Scanning for more additional languages is in the works.","title":"Supported Languages &amp; Frameworks"},{"location":"getting-started/","text":"Getting Started ShiftLeft Scan is distributed as a container image and hence it is easy to install, setup in the CI or locally, and then to run it. Scanning the Application Locally Pre-requisites Docker desktop in case of Windows and Mac. For linux complete these post-install steps. Your first scan Invoking the scan command detects the language automatically and proceeds with a scan docker run --rm -e \"WORKSPACE= ${ PWD } \" -v \" $PWD :/app:cached\" shiftleft/sast-scan scan For project types such as Java, go compile the projects prior to scanning. Or pass --build to attempt automatic build. docker run --rm -e \"WORKSPACE= ${ PWD } \" -v \" $PWD :/app:cached\" shiftleft/sast-scan scan --build For scanning a specific language project, use the --type option. For example, for scanning a python project, docker run --rm -e \"WORKSPACE= ${ PWD } \" -v \" $PWD :/app:cached\" shiftleft/sast-scan scan --src /app --type python On Windows use %cd% instead of $PWD to run the scan with Command prompt docker run --rm -e \"WORKSPACE=%cd%\" -v \"%cd%:/app:cached\" shiftleft/sast-scan scan --src /app --type python To scan multiple projects, separate the types with a comma. Here reports will be put in the directory specified by --out_dir docker run --rm -e \"WORKSPACE= ${ PWD } \" -v $PWD :/app shiftleft/sast-scan scan --src /app --type credscan,nodejs,python,yaml --out_dir /app/reports Scanning Java Projects For Java and JVM projects, it is important to compile the projects before invoking sast-scan in the dev and CI workflow. docker run --rm -e \"WORKSPACE= ${ PWD } \" -v ~/.m2:/.m2 -v < source path>:/app shiftleft/sast-scan scan --src /app --type java # For gradle projects docker run --rm -e \"WORKSPACE= ${ PWD } \" -v ~/.gradle:/.gradle -v < source path>:/app shiftleft/sast-scan scan --src /app --type java $ docker run --rm -e \"WORKSPACE=${PWD}\" -v $PWD:/app shiftleft/sast-scan scan \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551 \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2551 \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u255d INFO [2020-04-02 12:36:39,608] Scanning /app using scan plugins ['credscan', 'java', 'bash', 'depscan'] INFO [2020-04-02 12:36:39,609] ================================================================================ WARN[2020-04-02T12:36:39Z] Exceeded depth limit (2) INFO[2020-04-02T12:36:39Z] no leaks found, skipping writing report INFO[2020-04-02T12:36:39Z] No leaks detected. 2 commits audited in 8 milliseconds 936 microseconds INFO [2020-04-02 12:36:39,625] ================================================================================ INFO [2020-04-02 12:36:44,402] ================================================================================ INFO [2020-04-02 12:36:46,198] ================================================================================ INFO [2020-04-02 12:36:46,246] ================================================================================ INFO [2020-04-02 12:36:46,403] ================================================================================ INFO [2020-04-02 12:36:46,403] \u26a1\ufe0e Executing \"cdxgen -r -t java -o /app/reports/bom-java.xml /app\" ===License scan findings=== +--------------------------------+-----------+--------------+--------------------------------------------------+ | Package | Version | License Id | License conditions | +================================+===========+==============+==================================================+ | ch.qos.logback:logback-classic | 1.1.9 | EPL-1.0 | disclose-source, include-copyright, same-license | +--------------------------------+-----------+--------------+--------------------------------------------------+ | ch.qos.logback:logback-core | 1.1.9 | EPL-1.0 | disclose-source, include-copyright, same-license | +--------------------------------+-----------+--------------+--------------------------------------------------+ | org.aspectj:aspectjweaver | 1.8.9 | EPL-1.0 | disclose-source, include-copyright, same-license | +--------------------------------+-----------+--------------+--------------------------------------------------+ INFO [2020-04-02 12:37:33,451] To use GitHub advisory source please set the environment variable GITHUB_TOKEN! INFO [2020-04-02 12:38:19,811] Performing regular scan for /app using plugin java INFO [2020-04-02 12:38:19,812] Scanning 67 oss dependencies for issues INFO [2020-04-02 12:38:29,415] No oss vulnerabilities detected \u2705 tool description critical high medium low status ----------- ------------------------------------ ---------- ------ -------- ----- -------- findsecbugs Security audit by Find Security Bugs 8 16 0 0 \u274c shellcheck Shell script analysis by shellcheck 0 0 0 0 \u2705 pmd Static code analysis by PMD 0 0 19 35 \u274c Command-line arguments usage: scan [ -h ] [ -i SRC_DIR ] [ -o REPORTS_DIR ] [ -t SCAN_TYPE ] [ -c ] [ --build ] [ --no-error ] [ -m SCAN_MODE ] Wrapper for various static analysis tools optional arguments: -h, --help show this help message and exit -i SRC_DIR, --src SRC_DIR Source directory -o REPORTS_DIR, --out_dir REPORTS_DIR Reports directory -t SCAN_TYPE, --type SCAN_TYPE Override project type if auto-detection is incorrect. Comma separated values for multiple types. Eg: python,bash,credscan -c, --convert Convert results to sarif json format --build Attempt to automatically build the project for supported types --no-error Continue on error to prevent build from breaking -m SCAN_MODE, --mode SCAN_MODE Scan mode to use ci, ide, pr, release, deploy All the arguments are optional for scan. Environment variables Scan use a number of environment variables for configuration and cutomizing the default behaviour. Variable Purpose WORKSPACE URL or the path to use for all references to the source code. Use blank to use relative path or in case of GitHub code scanning SCAN_ID Custom id to use for the scan run. Set this to match your CI job id or any other id to simplify integration SCAN_AUTO_BUILD Enables automatic build using the bundled languages and runtime prior to scan. Supported languages are java, go, node.js, csharp, rust GITHUB_TOKEN GitHub personal access token with read:packages scope to enable package lookup during dependency and license scans REPOSITORY_URL Repository URL. Useful in cases when scan is trigger from a non-git based source such as an s3 bucket COMMIT_SHA Git commit hash. This is useful while scanning non-git based source BRANCH Git branch name. Automatically detected for git repositories. Specify this while scanning a folder or svn repository","title":"Getting started"},{"location":"getting-started/#getting-started","text":"ShiftLeft Scan is distributed as a container image and hence it is easy to install, setup in the CI or locally, and then to run it.","title":"Getting Started"},{"location":"getting-started/#scanning-the-application-locally","text":"","title":"Scanning the Application Locally"},{"location":"getting-started/#pre-requisites","text":"Docker desktop in case of Windows and Mac. For linux complete these post-install steps.","title":"Pre-requisites"},{"location":"getting-started/#your-first-scan","text":"Invoking the scan command detects the language automatically and proceeds with a scan docker run --rm -e \"WORKSPACE= ${ PWD } \" -v \" $PWD :/app:cached\" shiftleft/sast-scan scan For project types such as Java, go compile the projects prior to scanning. Or pass --build to attempt automatic build. docker run --rm -e \"WORKSPACE= ${ PWD } \" -v \" $PWD :/app:cached\" shiftleft/sast-scan scan --build For scanning a specific language project, use the --type option. For example, for scanning a python project, docker run --rm -e \"WORKSPACE= ${ PWD } \" -v \" $PWD :/app:cached\" shiftleft/sast-scan scan --src /app --type python On Windows use %cd% instead of $PWD to run the scan with Command prompt docker run --rm -e \"WORKSPACE=%cd%\" -v \"%cd%:/app:cached\" shiftleft/sast-scan scan --src /app --type python To scan multiple projects, separate the types with a comma. Here reports will be put in the directory specified by --out_dir docker run --rm -e \"WORKSPACE= ${ PWD } \" -v $PWD :/app shiftleft/sast-scan scan --src /app --type credscan,nodejs,python,yaml --out_dir /app/reports Scanning Java Projects For Java and JVM projects, it is important to compile the projects before invoking sast-scan in the dev and CI workflow. docker run --rm -e \"WORKSPACE= ${ PWD } \" -v ~/.m2:/.m2 -v < source path>:/app shiftleft/sast-scan scan --src /app --type java # For gradle projects docker run --rm -e \"WORKSPACE= ${ PWD } \" -v ~/.gradle:/.gradle -v < source path>:/app shiftleft/sast-scan scan --src /app --type java $ docker run --rm -e \"WORKSPACE=${PWD}\" -v $PWD:/app shiftleft/sast-scan scan \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551 \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2551 \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u255d INFO [2020-04-02 12:36:39,608] Scanning /app using scan plugins ['credscan', 'java', 'bash', 'depscan'] INFO [2020-04-02 12:36:39,609] ================================================================================ WARN[2020-04-02T12:36:39Z] Exceeded depth limit (2) INFO[2020-04-02T12:36:39Z] no leaks found, skipping writing report INFO[2020-04-02T12:36:39Z] No leaks detected. 2 commits audited in 8 milliseconds 936 microseconds INFO [2020-04-02 12:36:39,625] ================================================================================ INFO [2020-04-02 12:36:44,402] ================================================================================ INFO [2020-04-02 12:36:46,198] ================================================================================ INFO [2020-04-02 12:36:46,246] ================================================================================ INFO [2020-04-02 12:36:46,403] ================================================================================ INFO [2020-04-02 12:36:46,403] \u26a1\ufe0e Executing \"cdxgen -r -t java -o /app/reports/bom-java.xml /app\" ===License scan findings=== +--------------------------------+-----------+--------------+--------------------------------------------------+ | Package | Version | License Id | License conditions | +================================+===========+==============+==================================================+ | ch.qos.logback:logback-classic | 1.1.9 | EPL-1.0 | disclose-source, include-copyright, same-license | +--------------------------------+-----------+--------------+--------------------------------------------------+ | ch.qos.logback:logback-core | 1.1.9 | EPL-1.0 | disclose-source, include-copyright, same-license | +--------------------------------+-----------+--------------+--------------------------------------------------+ | org.aspectj:aspectjweaver | 1.8.9 | EPL-1.0 | disclose-source, include-copyright, same-license | +--------------------------------+-----------+--------------+--------------------------------------------------+ INFO [2020-04-02 12:37:33,451] To use GitHub advisory source please set the environment variable GITHUB_TOKEN! INFO [2020-04-02 12:38:19,811] Performing regular scan for /app using plugin java INFO [2020-04-02 12:38:19,812] Scanning 67 oss dependencies for issues INFO [2020-04-02 12:38:29,415] No oss vulnerabilities detected \u2705 tool description critical high medium low status ----------- ------------------------------------ ---------- ------ -------- ----- -------- findsecbugs Security audit by Find Security Bugs 8 16 0 0 \u274c shellcheck Shell script analysis by shellcheck 0 0 0 0 \u2705 pmd Static code analysis by PMD 0 0 19 35 \u274c","title":"Your first scan"},{"location":"getting-started/#command-line-arguments","text":"usage: scan [ -h ] [ -i SRC_DIR ] [ -o REPORTS_DIR ] [ -t SCAN_TYPE ] [ -c ] [ --build ] [ --no-error ] [ -m SCAN_MODE ] Wrapper for various static analysis tools optional arguments: -h, --help show this help message and exit -i SRC_DIR, --src SRC_DIR Source directory -o REPORTS_DIR, --out_dir REPORTS_DIR Reports directory -t SCAN_TYPE, --type SCAN_TYPE Override project type if auto-detection is incorrect. Comma separated values for multiple types. Eg: python,bash,credscan -c, --convert Convert results to sarif json format --build Attempt to automatically build the project for supported types --no-error Continue on error to prevent build from breaking -m SCAN_MODE, --mode SCAN_MODE Scan mode to use ci, ide, pr, release, deploy All the arguments are optional for scan.","title":"Command-line arguments"},{"location":"getting-started/#environment-variables","text":"Scan use a number of environment variables for configuration and cutomizing the default behaviour. Variable Purpose WORKSPACE URL or the path to use for all references to the source code. Use blank to use relative path or in case of GitHub code scanning SCAN_ID Custom id to use for the scan run. Set this to match your CI job id or any other id to simplify integration SCAN_AUTO_BUILD Enables automatic build using the bundled languages and runtime prior to scan. Supported languages are java, go, node.js, csharp, rust GITHUB_TOKEN GitHub personal access token with read:packages scope to enable package lookup during dependency and license scans REPOSITORY_URL Repository URL. Useful in cases when scan is trigger from a non-git based source such as an s3 bucket COMMIT_SHA Git commit hash. This is useful while scanning non-git based source BRANCH Git branch name. Automatically detected for git repositories. Specify this while scanning a folder or svn repository","title":"Environment variables"},{"location":"integrations/","text":"Integrating ShiftLeft Scan in CI/CD Pipelines Here are a few integration approaches for ShiftLeft Scan with modern CI/CD systems: Integration with Azure DevOps Pipelines Integration as Github Actions Integration with GitLab CI Integration with Google CloudBuild Integration with CircleCI Integration with JenkinsCI Integration with TravisCI","title":"CI/CD Integrations"},{"location":"integrations/#integrating-shiftleft-scan-in-cicd-pipelines","text":"Here are a few integration approaches for ShiftLeft Scan with modern CI/CD systems: Integration with Azure DevOps Pipelines Integration as Github Actions Integration with GitLab CI Integration with Google CloudBuild Integration with CircleCI Integration with JenkinsCI Integration with TravisCI","title":"Integrating ShiftLeft Scan in CI/CD Pipelines"},{"location":"integrations/azure-devops-pipeline/","text":"Integration with Azure DevOps Pipelines ShiftLeft Scan has a best-in-class integration for Azure Pipelines with our dedicated extension . To being integration, Install the extension to your Azure DevOps Organization. Ask your administrator for help if you do not have this permission. Simply add the following snippet to your build configuration YAML file (Usually azure-pipelines.yml). - script : | docker run \\ -v \"$(Build.SourcesDirectory):/app:cached\" \\ -v \"$(Build.ArtifactStagingDirectory):/reports:cached\" \\ shiftleft/sast-scan scan --src /app \\ --out_dir /reports/CodeAnalysisLogs displayName : \"Perform ShiftLeft Scan\" continueOnError : \"true\" - task : PublishBuildArtifacts@1 displayName : \"Publish analysis logs\" inputs : PathtoPublish : \"$(Build.ArtifactStagingDirectory)/CodeAnalysisLogs\" ArtifactName : \"CodeAnalysisLogs\" publishLocation : \"Container\" Trigger a build as normal and wait for it to complete. From the Pipelines page, select the most recent run. You should see a tab called ShiftLeft Scan as shown below. Individual scan reports are shown as tabs as seen below. You can click on any tab to view and audit the different reports Summary would also be available in the build console logs for easy reference Container jobs based pipelines By default, jobs run on the host machine where the agent is installed. This is convenient and typically well-suited for projects that are just beginning to adopt Azure Pipelines. On Linux and Windows agents, jobs may be run on the host or in a container . ShiftLeft scan support such container jobs based pipelines. Use container: shiftleft/sast-scan:latest as shown. pool : vmImage : 'ubuntu-latest' container : shiftleft/sast-scan:latest steps : # This integrates ShiftLeft Scan with automatic build - script : scan --build --out_dir $(Build.ArtifactStagingDirectory)/CodeAnalysisLogs env : WORKSPACE : https://github.com/prabhu/HelloShiftLeft/blob/$(Build.SourceVersion) GITHUB_TOKEN : $(GITHUB_TOKEN) displayName : \"Perform ShiftLeft scan\" continueOnError : \"true\" # To integrate with the ShiftLeft Scan Extension it is necessary to publish the CodeAnalysisLogs folder # as an artifact with the same name - task : PublishBuildArtifacts@1 displayName : \"Publish analysis logs\" inputs : PathtoPublish : \"$(Build.ArtifactStagingDirectory)/CodeAnalysisLogs\" ArtifactName : \"CodeAnalysisLogs\" publishLocation : \"Container\" Further, by adding --build argument with scan command supported projects such as java, csharp, go or node.js can also be built on the fly thus speeding up the analysis. Please use container job based pipelines if your organization supports. Advanced configuration You can improve the quality of the dependency scan ( --type depscan ) by passing a GITHUB_TOKEN as an environment variable. This token should have the following scopes: read:packages - script : | docker run \\ -e \"GITHUB_TOKEN=$(GITHUB_TOKEN)\" \\ -v \"$(Build.SourcesDirectory):/app:cached\" \\ -v \"$(Build.ArtifactStagingDirectory):/reports:cached\" \\ shiftleft/sast-scan scan --src /app \\ --out_dir /reports/CodeAnalysisLogs displayName : \"Perform ShiftLeft Scan\" continueOnError : \"true\" Refer to this configuration as an example.","title":"Azure DevOps Pipelines"},{"location":"integrations/azure-devops-pipeline/#integration-with-azure-devops-pipelines","text":"ShiftLeft Scan has a best-in-class integration for Azure Pipelines with our dedicated extension . To being integration, Install the extension to your Azure DevOps Organization. Ask your administrator for help if you do not have this permission. Simply add the following snippet to your build configuration YAML file (Usually azure-pipelines.yml). - script : | docker run \\ -v \"$(Build.SourcesDirectory):/app:cached\" \\ -v \"$(Build.ArtifactStagingDirectory):/reports:cached\" \\ shiftleft/sast-scan scan --src /app \\ --out_dir /reports/CodeAnalysisLogs displayName : \"Perform ShiftLeft Scan\" continueOnError : \"true\" - task : PublishBuildArtifacts@1 displayName : \"Publish analysis logs\" inputs : PathtoPublish : \"$(Build.ArtifactStagingDirectory)/CodeAnalysisLogs\" ArtifactName : \"CodeAnalysisLogs\" publishLocation : \"Container\" Trigger a build as normal and wait for it to complete. From the Pipelines page, select the most recent run. You should see a tab called ShiftLeft Scan as shown below. Individual scan reports are shown as tabs as seen below. You can click on any tab to view and audit the different reports Summary would also be available in the build console logs for easy reference","title":"Integration with Azure DevOps Pipelines"},{"location":"integrations/azure-devops-pipeline/#container-jobs-based-pipelines","text":"By default, jobs run on the host machine where the agent is installed. This is convenient and typically well-suited for projects that are just beginning to adopt Azure Pipelines. On Linux and Windows agents, jobs may be run on the host or in a container . ShiftLeft scan support such container jobs based pipelines. Use container: shiftleft/sast-scan:latest as shown. pool : vmImage : 'ubuntu-latest' container : shiftleft/sast-scan:latest steps : # This integrates ShiftLeft Scan with automatic build - script : scan --build --out_dir $(Build.ArtifactStagingDirectory)/CodeAnalysisLogs env : WORKSPACE : https://github.com/prabhu/HelloShiftLeft/blob/$(Build.SourceVersion) GITHUB_TOKEN : $(GITHUB_TOKEN) displayName : \"Perform ShiftLeft scan\" continueOnError : \"true\" # To integrate with the ShiftLeft Scan Extension it is necessary to publish the CodeAnalysisLogs folder # as an artifact with the same name - task : PublishBuildArtifacts@1 displayName : \"Publish analysis logs\" inputs : PathtoPublish : \"$(Build.ArtifactStagingDirectory)/CodeAnalysisLogs\" ArtifactName : \"CodeAnalysisLogs\" publishLocation : \"Container\" Further, by adding --build argument with scan command supported projects such as java, csharp, go or node.js can also be built on the fly thus speeding up the analysis. Please use container job based pipelines if your organization supports.","title":"Container jobs based pipelines"},{"location":"integrations/azure-devops-pipeline/#advanced-configuration","text":"You can improve the quality of the dependency scan ( --type depscan ) by passing a GITHUB_TOKEN as an environment variable. This token should have the following scopes: read:packages - script : | docker run \\ -e \"GITHUB_TOKEN=$(GITHUB_TOKEN)\" \\ -v \"$(Build.SourcesDirectory):/app:cached\" \\ -v \"$(Build.ArtifactStagingDirectory):/reports:cached\" \\ shiftleft/sast-scan scan --src /app \\ --out_dir /reports/CodeAnalysisLogs displayName : \"Perform ShiftLeft Scan\" continueOnError : \"true\" Refer to this configuration as an example.","title":"Advanced configuration"},{"location":"integrations/circleci/","text":"Integration with CircleCI ShiftLeft Scan has good support for integration with CircleCI builds. version : 2.1 jobs : build : docker : - image : shiftleft/sast-scan working_directory : ~/repo steps : - checkout - run : name : Perform ShiftLeft Scan command : | scan --build - store_artifacts : path : reports destination : sast-scan-reports To use environment variables such as GITHUB_TOKEN pass it to the docker step directly as shown. version : 2.1 jobs : build : docker : - image : shiftleft/sast-scan environment : GITHUB_TOKEN : $GITHUB_TOKEN WORKSPACE : ${CIRCLE_REPOSITORY_URL}/blob/${CIRCLE_SHA1}","title":"Circle CI"},{"location":"integrations/circleci/#integration-with-circleci","text":"ShiftLeft Scan has good support for integration with CircleCI builds. version : 2.1 jobs : build : docker : - image : shiftleft/sast-scan working_directory : ~/repo steps : - checkout - run : name : Perform ShiftLeft Scan command : | scan --build - store_artifacts : path : reports destination : sast-scan-reports To use environment variables such as GITHUB_TOKEN pass it to the docker step directly as shown. version : 2.1 jobs : build : docker : - image : shiftleft/sast-scan environment : GITHUB_TOKEN : $GITHUB_TOKEN WORKSPACE : ${CIRCLE_REPOSITORY_URL}/blob/${CIRCLE_SHA1}","title":"Integration with CircleCI"},{"location":"integrations/github-actions/","text":"Integration as Github Actions ShiftLeft Scan is available as a free GitHub action here A minimal setup configuration is shown below: - uses : ShiftLeftSecurity/scan-action@master with : type : \"credscan,java,depscan\" An advanced configuration including the ability to customize the WORKSPACE URL and GitHub package search is below: - name : ShiftLeft Scan uses : ShiftLeftSecurity/scan-action@master env : WORKSPACE : https://github.com/${{ github.repository }}/blob/${{ github.sha }} GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} with : output : reports - name : Upload scan reports uses : actions/upload-artifact@v1.0.0 with : name : shiftleft-scan-reports path : reports Refer to this example for a complete build pipeline.","title":"Github Actions"},{"location":"integrations/github-actions/#integration-as-github-actions","text":"ShiftLeft Scan is available as a free GitHub action here A minimal setup configuration is shown below: - uses : ShiftLeftSecurity/scan-action@master with : type : \"credscan,java,depscan\" An advanced configuration including the ability to customize the WORKSPACE URL and GitHub package search is below: - name : ShiftLeft Scan uses : ShiftLeftSecurity/scan-action@master env : WORKSPACE : https://github.com/${{ github.repository }}/blob/${{ github.sha }} GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} with : output : reports - name : Upload scan reports uses : actions/upload-artifact@v1.0.0 with : name : shiftleft-scan-reports path : reports Refer to this example for a complete build pipeline.","title":"Integration as Github Actions"},{"location":"integrations/gitlab/","text":"Integration with Gitlab CI ShiftLeft Scan scanning is available for all GitLab CI users including the free users. Simply add the below section to your .gitlab-ci.yml file job : image : shiftleft/sast-scan:latest script : - scan To pass additional environment variables use the environment section as described here Example for a python project with GITHUB_TOKEN variables : GITHUB_TOKEN : $GITHUB_TOKEN scan : stage : test image : name : shiftleft/sast-scan script : - scan --src ${CI_PROJECT_DIR} --type credscan,python,depscan --out_dir ${CI_PROJECT_DIR}/reports artifacts : name : \"$CI_JOB_NAME-$CI_COMMIT_REF_NAME\" paths : - $CI_PROJECT_DIR/reports/ when : always Below is a configuration for a Java project with automatic build using --build argument. variables : GITHUB_TOKEN : $GITHUB_TOKEN scan : stage : test image : name : shiftleft/sast-scan script : - scan --build --src ${CI_PROJECT_DIR} --type credscan,java,depscan --out_dir ${CI_PROJECT_DIR}/reports artifacts : name : \"$CI_JOB_NAME-$CI_COMMIT_REF_NAME\" paths : - $CI_PROJECT_DIR/reports/ when : always","title":"GitLab CI"},{"location":"integrations/gitlab/#integration-with-gitlab-ci","text":"ShiftLeft Scan scanning is available for all GitLab CI users including the free users. Simply add the below section to your .gitlab-ci.yml file job : image : shiftleft/sast-scan:latest script : - scan To pass additional environment variables use the environment section as described here Example for a python project with GITHUB_TOKEN variables : GITHUB_TOKEN : $GITHUB_TOKEN scan : stage : test image : name : shiftleft/sast-scan script : - scan --src ${CI_PROJECT_DIR} --type credscan,python,depscan --out_dir ${CI_PROJECT_DIR}/reports artifacts : name : \"$CI_JOB_NAME-$CI_COMMIT_REF_NAME\" paths : - $CI_PROJECT_DIR/reports/ when : always Below is a configuration for a Java project with automatic build using --build argument. variables : GITHUB_TOKEN : $GITHUB_TOKEN scan : stage : test image : name : shiftleft/sast-scan script : - scan --build --src ${CI_PROJECT_DIR} --type credscan,java,depscan --out_dir ${CI_PROJECT_DIR}/reports artifacts : name : \"$CI_JOB_NAME-$CI_COMMIT_REF_NAME\" paths : - $CI_PROJECT_DIR/reports/ when : always","title":"Integration with Gitlab CI"},{"location":"integrations/google-cloudbuild/","text":"Integration with Google CloudBuild Here is a minimal configuration to setup scan with Google CloudBuild, steps : - name : shiftleft/sast-scan entrypoint : scan Build the project before scanning and substitute for Workspace and GitHub package lookups. steps : - name : shiftleft/sast-scan entrypoint : /usr/local/src/scan --build env : - \"WORKSPACE=https://github.com/$REPO_NAME/blob/$COMMIT_SHA\" - \"GITHUB_TOKEN=${_GITHUB_TOKEN}\" substitutions : _GITHUB_TOKEN : Token with read:packages scope In the above configuration, GITHUB_TOKEN is passed as an environment variable. This token should have the following scopes: read:packages","title":"Google CloudBuild"},{"location":"integrations/google-cloudbuild/#integration-with-google-cloudbuild","text":"Here is a minimal configuration to setup scan with Google CloudBuild, steps : - name : shiftleft/sast-scan entrypoint : scan Build the project before scanning and substitute for Workspace and GitHub package lookups. steps : - name : shiftleft/sast-scan entrypoint : /usr/local/src/scan --build env : - \"WORKSPACE=https://github.com/$REPO_NAME/blob/$COMMIT_SHA\" - \"GITHUB_TOKEN=${_GITHUB_TOKEN}\" substitutions : _GITHUB_TOKEN : Token with read:packages scope In the above configuration, GITHUB_TOKEN is passed as an environment variable. This token should have the following scopes: read:packages","title":"Integration with Google CloudBuild"},{"location":"integrations/jenkins/","text":"Integration with Jenkins You can add the following stage to your Jenkinsfile (declarative syntax) for a very basic integrations. stages { stage('ShiftLeft Scan') { agent { docker { image 'shiftleft/sast-scan' } } steps { sh 'scan' } } } For Java and JVM based projects, compile the project before invoking the scan. stages { stage('ShiftLeft Scan') { agent { docker { image 'shiftleft/sast-scan' } } steps { sh 'scan --build' } } } We also recommend archiving artifacts generated by the scan for easy viewing using the archiveArtifacts step.","title":"Jenkins"},{"location":"integrations/jenkins/#integration-with-jenkins","text":"You can add the following stage to your Jenkinsfile (declarative syntax) for a very basic integrations. stages { stage('ShiftLeft Scan') { agent { docker { image 'shiftleft/sast-scan' } } steps { sh 'scan' } } } For Java and JVM based projects, compile the project before invoking the scan. stages { stage('ShiftLeft Scan') { agent { docker { image 'shiftleft/sast-scan' } } steps { sh 'scan --build' } } } We also recommend archiving artifacts generated by the scan for easy viewing using the archiveArtifacts step.","title":"Integration with Jenkins"},{"location":"integrations/travis/","text":"Integration with Travis CI Here is a minimal configuration to setup scan with Travis CI, services : - docker script : - docker run -v $PWD:/app shiftleft/sast-scan scan --build","title":"Travis CI"},{"location":"integrations/travis/#integration-with-travis-ci","text":"Here is a minimal configuration to setup scan with Travis CI, services : - docker script : - docker run -v $PWD:/app shiftleft/sast-scan scan --build","title":"Integration with Travis CI"},{"location":"integrations/vscode/","text":"Visual Studio Code Extension ShiftLeft Scan is full integrated with Visual Studio Code IDE via its own native extension . Use this extension to perform security scans and visualize the scan results without leaving your IDE. You can also navigate to the source code and remediate the results by interacting with the scan results. Features One-click security scanning (SAST based scanning) Navigation to the source location of the result Scan Results shows details about the result: Result info Run info Code flow steps Attachments Fixes macOS touch bar support Results Viewer Automatically launches after performing a scan or when the workspace contains .sarif files in reports directory Updates the Result Details Panel with the currently selected result in the Results List, Problems Panel, or in source code Manually open it by typing \"ShiftLeft: View Results\" in the Command Palette(Ctrl+P or \u2318+P) or using the hotkey (Ctrl+L then Ctrl+E) Install Install or upgrade Visual Studio Code . Requires version 1.41.0 or higher. Open up the extensions tab (Ctrl + Shift + X) and search for \"ShiftLeft Scan\". Click \"Install\" Alternatively, Quick Open (Ctrl + P)m paste the follwing command ext install shiftleftsecurity.shiftleft-scan and press enter. Reload VS Code Install Docker Desktop for performing ShiftLeft Scan Use Perform a ShiftLeft Scan by using the Perform Security Scan option in the results window. Or in the Command Palette (Ctrl+Shift+p or \u2318+\u21e7+p) type \"ShiftLeft: Security Scan\" or use the hotkey (Ctrl+l then Ctrl+p) Results will show up on the Scan Findings panel Click the result you're investigating. The editor will navigate to the location Monorepo support While working with large monorepo based repositories, configure the application root to limit the scanning to specific application directories. To do this, go to Preferences and search for \"ShiftLeft\". Specify the App Root as shown below: NOTE: This configuration can be specified for either the user or for the workspace. To set it for a particular workspace, choose the Workspace tab in the above settings screen. Troubleshooting VS Code version should be 1.41.0 or higher for the extension to install and work The user should be part of the docker group on Linux and Mac. Please refer to the post install steps for your platform. Example below for linux. sudo groupadd docker sudo usermod -aG docker $USER Internet connectivity is required while loading the results for the first time. You might see the below error otherwise. Unable to load schema from 'https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json': getaddrinfo ENOTFOUND raw.githubusercontent.com.","title":"IDE Integration"},{"location":"integrations/vscode/#visual-studio-code-extension","text":"ShiftLeft Scan is full integrated with Visual Studio Code IDE via its own native extension . Use this extension to perform security scans and visualize the scan results without leaving your IDE. You can also navigate to the source code and remediate the results by interacting with the scan results.","title":"Visual Studio Code Extension"},{"location":"integrations/vscode/#features","text":"One-click security scanning (SAST based scanning) Navigation to the source location of the result Scan Results shows details about the result: Result info Run info Code flow steps Attachments Fixes macOS touch bar support","title":"Features"},{"location":"integrations/vscode/#results-viewer","text":"Automatically launches after performing a scan or when the workspace contains .sarif files in reports directory Updates the Result Details Panel with the currently selected result in the Results List, Problems Panel, or in source code Manually open it by typing \"ShiftLeft: View Results\" in the Command Palette(Ctrl+P or \u2318+P) or using the hotkey (Ctrl+L then Ctrl+E)","title":"Results Viewer"},{"location":"integrations/vscode/#install","text":"Install or upgrade Visual Studio Code . Requires version 1.41.0 or higher. Open up the extensions tab (Ctrl + Shift + X) and search for \"ShiftLeft Scan\". Click \"Install\" Alternatively, Quick Open (Ctrl + P)m paste the follwing command ext install shiftleftsecurity.shiftleft-scan and press enter. Reload VS Code Install Docker Desktop for performing ShiftLeft Scan","title":"Install"},{"location":"integrations/vscode/#use","text":"Perform a ShiftLeft Scan by using the Perform Security Scan option in the results window. Or in the Command Palette (Ctrl+Shift+p or \u2318+\u21e7+p) type \"ShiftLeft: Security Scan\" or use the hotkey (Ctrl+l then Ctrl+p) Results will show up on the Scan Findings panel Click the result you're investigating. The editor will navigate to the location","title":"Use"},{"location":"integrations/vscode/#monorepo-support","text":"While working with large monorepo based repositories, configure the application root to limit the scanning to specific application directories. To do this, go to Preferences and search for \"ShiftLeft\". Specify the App Root as shown below: NOTE: This configuration can be specified for either the user or for the workspace. To set it for a particular workspace, choose the Workspace tab in the above settings screen.","title":"Monorepo support"},{"location":"integrations/vscode/#troubleshooting","text":"VS Code version should be 1.41.0 or higher for the extension to install and work The user should be part of the docker group on Linux and Mac. Please refer to the post install steps for your platform. Example below for linux. sudo groupadd docker sudo usermod -aG docker $USER Internet connectivity is required while loading the results for the first time. You might see the below error otherwise. Unable to load schema from 'https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json': getaddrinfo ENOTFOUND raw.githubusercontent.com.","title":"Troubleshooting"}]}